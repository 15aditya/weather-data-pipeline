FROM ghcr.io/astral-sh/uv:0.6.13 AS uv

FROM public.ecr.aws/lambda/python:3.12 AS builder

# Set working directory
WORKDIR /${LAMBDA_TASK_ROOT}

# Enable bytecode compilation, to improve cold-start performance.
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata, to create a deterministic layer.
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching.
ENV UV_LINK_MODE=copy

# Install tar, curl, and uv
RUN dnf update -y && \
    dnf install -y tar && \
    curl -LsSf https://astral.sh/uv/install.sh | sh

RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"

# Copy function code and dependencies
COPY . ${LAMBDA_TASK_ROOT}

CMD ["etl.lambda.normalisation.lambda_handler"]
